// Generated register defines for serial_link

// Copyright information found in source file:
// Copyright 2022 ETH Zurich and University of Bologna.

// Licensing information found in source file:
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

#ifndef _SERIAL_LINK_REG_DEFS_
#define _SERIAL_LINK_REG_DEFS_

#ifdef __cplusplus
extern "C" {
#endif
// Number of channels
#define SERIAL_LINK_PARAM_NUM_CHANNELS 38

// Number of channels
#define SERIAL_LINK_PARAM_LOG2_NUM_CHANNELS 6

// Number of bits transfered in one clock cycle (2 * NumLanes)
#define SERIAL_LINK_PARAM_NUM_BITS 16

// Number of bits for clock divider counter
#define SERIAL_LINK_PARAM_LOG2_MAX_CLK_DIV 10

// The number of bits used for the auto-flush counters in the channel
// allocator
#define SERIAL_LINK_PARAM_FLUSH_COUNTER_WIDTH 8

// The depth of the TX FIFO for raw mode operation.
#define SERIAL_LINK_PARAM_LOG2_RAW_MODE_T_X_FIFO_DEPTH 3

// Register width
#define SERIAL_LINK_PARAM_REG_WIDTH 32

// Global clock, isolation and reset control configuration
#define SERIAL_LINK_CTRL_REG_OFFSET 0x0
#define SERIAL_LINK_CTRL_CLK_ENA_BIT 0
#define SERIAL_LINK_CTRL_RESET_N_BIT 1
#define SERIAL_LINK_CTRL_AXI_IN_ISOLATE_BIT 8
#define SERIAL_LINK_CTRL_AXI_OUT_ISOLATE_BIT 9

// Isolation status of AXI ports
#define SERIAL_LINK_ISOLATED_REG_OFFSET 0x4
#define SERIAL_LINK_ISOLATED_AXI_IN_BIT 0
#define SERIAL_LINK_ISOLATED_AXI_OUT_BIT 1

// Holds clock divider factor for forwarded clock of the TX Phys (common
// parameters)
#define SERIAL_LINK_TX_PHY_CLK_DIV_CLK_DIVS_FIELD_WIDTH 11
#define SERIAL_LINK_TX_PHY_CLK_DIV_CLK_DIVS_FIELDS_PER_REG 2
#define SERIAL_LINK_TX_PHY_CLK_DIV_MULTIREG_COUNT 38

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_0_REG_OFFSET 0x8
#define SERIAL_LINK_TX_PHY_CLK_DIV_0_CLK_DIVS_0_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_0_CLK_DIVS_0_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_0_CLK_DIVS_0_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_0_CLK_DIVS_0_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_0_CLK_DIVS_0_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_1_REG_OFFSET 0xc
#define SERIAL_LINK_TX_PHY_CLK_DIV_1_CLK_DIVS_1_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_1_CLK_DIVS_1_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_1_CLK_DIVS_1_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_1_CLK_DIVS_1_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_1_CLK_DIVS_1_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_2_REG_OFFSET 0x10
#define SERIAL_LINK_TX_PHY_CLK_DIV_2_CLK_DIVS_2_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_2_CLK_DIVS_2_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_2_CLK_DIVS_2_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_2_CLK_DIVS_2_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_2_CLK_DIVS_2_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_3_REG_OFFSET 0x14
#define SERIAL_LINK_TX_PHY_CLK_DIV_3_CLK_DIVS_3_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_3_CLK_DIVS_3_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_3_CLK_DIVS_3_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_3_CLK_DIVS_3_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_3_CLK_DIVS_3_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_4_REG_OFFSET 0x18
#define SERIAL_LINK_TX_PHY_CLK_DIV_4_CLK_DIVS_4_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_4_CLK_DIVS_4_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_4_CLK_DIVS_4_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_4_CLK_DIVS_4_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_4_CLK_DIVS_4_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_5_REG_OFFSET 0x1c
#define SERIAL_LINK_TX_PHY_CLK_DIV_5_CLK_DIVS_5_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_5_CLK_DIVS_5_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_5_CLK_DIVS_5_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_5_CLK_DIVS_5_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_5_CLK_DIVS_5_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_6_REG_OFFSET 0x20
#define SERIAL_LINK_TX_PHY_CLK_DIV_6_CLK_DIVS_6_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_6_CLK_DIVS_6_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_6_CLK_DIVS_6_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_6_CLK_DIVS_6_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_6_CLK_DIVS_6_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_7_REG_OFFSET 0x24
#define SERIAL_LINK_TX_PHY_CLK_DIV_7_CLK_DIVS_7_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_7_CLK_DIVS_7_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_7_CLK_DIVS_7_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_7_CLK_DIVS_7_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_7_CLK_DIVS_7_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_8_REG_OFFSET 0x28
#define SERIAL_LINK_TX_PHY_CLK_DIV_8_CLK_DIVS_8_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_8_CLK_DIVS_8_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_8_CLK_DIVS_8_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_8_CLK_DIVS_8_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_8_CLK_DIVS_8_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_9_REG_OFFSET 0x2c
#define SERIAL_LINK_TX_PHY_CLK_DIV_9_CLK_DIVS_9_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_9_CLK_DIVS_9_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_9_CLK_DIVS_9_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_9_CLK_DIVS_9_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_9_CLK_DIVS_9_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_10_REG_OFFSET 0x30
#define SERIAL_LINK_TX_PHY_CLK_DIV_10_CLK_DIVS_10_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_10_CLK_DIVS_10_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_10_CLK_DIVS_10_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_10_CLK_DIVS_10_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_10_CLK_DIVS_10_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_11_REG_OFFSET 0x34
#define SERIAL_LINK_TX_PHY_CLK_DIV_11_CLK_DIVS_11_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_11_CLK_DIVS_11_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_11_CLK_DIVS_11_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_11_CLK_DIVS_11_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_11_CLK_DIVS_11_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_12_REG_OFFSET 0x38
#define SERIAL_LINK_TX_PHY_CLK_DIV_12_CLK_DIVS_12_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_12_CLK_DIVS_12_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_12_CLK_DIVS_12_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_12_CLK_DIVS_12_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_12_CLK_DIVS_12_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_13_REG_OFFSET 0x3c
#define SERIAL_LINK_TX_PHY_CLK_DIV_13_CLK_DIVS_13_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_13_CLK_DIVS_13_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_13_CLK_DIVS_13_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_13_CLK_DIVS_13_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_13_CLK_DIVS_13_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_14_REG_OFFSET 0x40
#define SERIAL_LINK_TX_PHY_CLK_DIV_14_CLK_DIVS_14_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_14_CLK_DIVS_14_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_14_CLK_DIVS_14_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_14_CLK_DIVS_14_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_14_CLK_DIVS_14_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_15_REG_OFFSET 0x44
#define SERIAL_LINK_TX_PHY_CLK_DIV_15_CLK_DIVS_15_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_15_CLK_DIVS_15_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_15_CLK_DIVS_15_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_15_CLK_DIVS_15_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_15_CLK_DIVS_15_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_16_REG_OFFSET 0x48
#define SERIAL_LINK_TX_PHY_CLK_DIV_16_CLK_DIVS_16_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_16_CLK_DIVS_16_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_16_CLK_DIVS_16_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_16_CLK_DIVS_16_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_16_CLK_DIVS_16_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_17_REG_OFFSET 0x4c
#define SERIAL_LINK_TX_PHY_CLK_DIV_17_CLK_DIVS_17_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_17_CLK_DIVS_17_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_17_CLK_DIVS_17_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_17_CLK_DIVS_17_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_17_CLK_DIVS_17_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_18_REG_OFFSET 0x50
#define SERIAL_LINK_TX_PHY_CLK_DIV_18_CLK_DIVS_18_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_18_CLK_DIVS_18_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_18_CLK_DIVS_18_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_18_CLK_DIVS_18_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_18_CLK_DIVS_18_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_19_REG_OFFSET 0x54
#define SERIAL_LINK_TX_PHY_CLK_DIV_19_CLK_DIVS_19_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_19_CLK_DIVS_19_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_19_CLK_DIVS_19_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_19_CLK_DIVS_19_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_19_CLK_DIVS_19_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_20_REG_OFFSET 0x58
#define SERIAL_LINK_TX_PHY_CLK_DIV_20_CLK_DIVS_20_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_20_CLK_DIVS_20_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_20_CLK_DIVS_20_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_20_CLK_DIVS_20_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_20_CLK_DIVS_20_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_21_REG_OFFSET 0x5c
#define SERIAL_LINK_TX_PHY_CLK_DIV_21_CLK_DIVS_21_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_21_CLK_DIVS_21_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_21_CLK_DIVS_21_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_21_CLK_DIVS_21_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_21_CLK_DIVS_21_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_22_REG_OFFSET 0x60
#define SERIAL_LINK_TX_PHY_CLK_DIV_22_CLK_DIVS_22_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_22_CLK_DIVS_22_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_22_CLK_DIVS_22_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_22_CLK_DIVS_22_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_22_CLK_DIVS_22_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_23_REG_OFFSET 0x64
#define SERIAL_LINK_TX_PHY_CLK_DIV_23_CLK_DIVS_23_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_23_CLK_DIVS_23_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_23_CLK_DIVS_23_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_23_CLK_DIVS_23_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_23_CLK_DIVS_23_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_24_REG_OFFSET 0x68
#define SERIAL_LINK_TX_PHY_CLK_DIV_24_CLK_DIVS_24_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_24_CLK_DIVS_24_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_24_CLK_DIVS_24_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_24_CLK_DIVS_24_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_24_CLK_DIVS_24_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_25_REG_OFFSET 0x6c
#define SERIAL_LINK_TX_PHY_CLK_DIV_25_CLK_DIVS_25_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_25_CLK_DIVS_25_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_25_CLK_DIVS_25_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_25_CLK_DIVS_25_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_25_CLK_DIVS_25_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_26_REG_OFFSET 0x70
#define SERIAL_LINK_TX_PHY_CLK_DIV_26_CLK_DIVS_26_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_26_CLK_DIVS_26_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_26_CLK_DIVS_26_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_26_CLK_DIVS_26_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_26_CLK_DIVS_26_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_27_REG_OFFSET 0x74
#define SERIAL_LINK_TX_PHY_CLK_DIV_27_CLK_DIVS_27_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_27_CLK_DIVS_27_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_27_CLK_DIVS_27_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_27_CLK_DIVS_27_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_27_CLK_DIVS_27_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_28_REG_OFFSET 0x78
#define SERIAL_LINK_TX_PHY_CLK_DIV_28_CLK_DIVS_28_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_28_CLK_DIVS_28_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_28_CLK_DIVS_28_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_28_CLK_DIVS_28_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_28_CLK_DIVS_28_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_29_REG_OFFSET 0x7c
#define SERIAL_LINK_TX_PHY_CLK_DIV_29_CLK_DIVS_29_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_29_CLK_DIVS_29_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_29_CLK_DIVS_29_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_29_CLK_DIVS_29_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_29_CLK_DIVS_29_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_30_REG_OFFSET 0x80
#define SERIAL_LINK_TX_PHY_CLK_DIV_30_CLK_DIVS_30_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_30_CLK_DIVS_30_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_30_CLK_DIVS_30_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_30_CLK_DIVS_30_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_30_CLK_DIVS_30_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_31_REG_OFFSET 0x84
#define SERIAL_LINK_TX_PHY_CLK_DIV_31_CLK_DIVS_31_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_31_CLK_DIVS_31_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_31_CLK_DIVS_31_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_31_CLK_DIVS_31_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_31_CLK_DIVS_31_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_32_REG_OFFSET 0x88
#define SERIAL_LINK_TX_PHY_CLK_DIV_32_CLK_DIVS_32_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_32_CLK_DIVS_32_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_32_CLK_DIVS_32_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_32_CLK_DIVS_32_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_32_CLK_DIVS_32_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_33_REG_OFFSET 0x8c
#define SERIAL_LINK_TX_PHY_CLK_DIV_33_CLK_DIVS_33_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_33_CLK_DIVS_33_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_33_CLK_DIVS_33_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_33_CLK_DIVS_33_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_33_CLK_DIVS_33_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_34_REG_OFFSET 0x90
#define SERIAL_LINK_TX_PHY_CLK_DIV_34_CLK_DIVS_34_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_34_CLK_DIVS_34_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_34_CLK_DIVS_34_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_34_CLK_DIVS_34_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_34_CLK_DIVS_34_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_35_REG_OFFSET 0x94
#define SERIAL_LINK_TX_PHY_CLK_DIV_35_CLK_DIVS_35_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_35_CLK_DIVS_35_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_35_CLK_DIVS_35_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_35_CLK_DIVS_35_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_35_CLK_DIVS_35_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_36_REG_OFFSET 0x98
#define SERIAL_LINK_TX_PHY_CLK_DIV_36_CLK_DIVS_36_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_36_CLK_DIVS_36_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_36_CLK_DIVS_36_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_36_CLK_DIVS_36_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_36_CLK_DIVS_36_OFFSET })

// Holds clock divider factor for forwarded clock of the TX Phys
#define SERIAL_LINK_TX_PHY_CLK_DIV_37_REG_OFFSET 0x9c
#define SERIAL_LINK_TX_PHY_CLK_DIV_37_CLK_DIVS_37_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_DIV_37_CLK_DIVS_37_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_DIV_37_CLK_DIVS_37_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_DIV_37_CLK_DIVS_37_MASK, .index = SERIAL_LINK_TX_PHY_CLK_DIV_37_CLK_DIVS_37_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys (common
// parameters)
#define SERIAL_LINK_TX_PHY_CLK_START_CLK_SHIFT_START_FIELD_WIDTH 11
#define SERIAL_LINK_TX_PHY_CLK_START_CLK_SHIFT_START_FIELDS_PER_REG 2
#define SERIAL_LINK_TX_PHY_CLK_START_MULTIREG_COUNT 38

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_0_REG_OFFSET 0xa0
#define SERIAL_LINK_TX_PHY_CLK_START_0_CLK_SHIFT_START_0_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_0_CLK_SHIFT_START_0_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_0_CLK_SHIFT_START_0_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_0_CLK_SHIFT_START_0_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_0_CLK_SHIFT_START_0_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_1_REG_OFFSET 0xa4
#define SERIAL_LINK_TX_PHY_CLK_START_1_CLK_SHIFT_START_1_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_1_CLK_SHIFT_START_1_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_1_CLK_SHIFT_START_1_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_1_CLK_SHIFT_START_1_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_1_CLK_SHIFT_START_1_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_2_REG_OFFSET 0xa8
#define SERIAL_LINK_TX_PHY_CLK_START_2_CLK_SHIFT_START_2_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_2_CLK_SHIFT_START_2_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_2_CLK_SHIFT_START_2_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_2_CLK_SHIFT_START_2_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_2_CLK_SHIFT_START_2_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_3_REG_OFFSET 0xac
#define SERIAL_LINK_TX_PHY_CLK_START_3_CLK_SHIFT_START_3_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_3_CLK_SHIFT_START_3_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_3_CLK_SHIFT_START_3_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_3_CLK_SHIFT_START_3_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_3_CLK_SHIFT_START_3_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_4_REG_OFFSET 0xb0
#define SERIAL_LINK_TX_PHY_CLK_START_4_CLK_SHIFT_START_4_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_4_CLK_SHIFT_START_4_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_4_CLK_SHIFT_START_4_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_4_CLK_SHIFT_START_4_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_4_CLK_SHIFT_START_4_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_5_REG_OFFSET 0xb4
#define SERIAL_LINK_TX_PHY_CLK_START_5_CLK_SHIFT_START_5_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_5_CLK_SHIFT_START_5_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_5_CLK_SHIFT_START_5_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_5_CLK_SHIFT_START_5_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_5_CLK_SHIFT_START_5_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_6_REG_OFFSET 0xb8
#define SERIAL_LINK_TX_PHY_CLK_START_6_CLK_SHIFT_START_6_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_6_CLK_SHIFT_START_6_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_6_CLK_SHIFT_START_6_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_6_CLK_SHIFT_START_6_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_6_CLK_SHIFT_START_6_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_7_REG_OFFSET 0xbc
#define SERIAL_LINK_TX_PHY_CLK_START_7_CLK_SHIFT_START_7_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_7_CLK_SHIFT_START_7_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_7_CLK_SHIFT_START_7_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_7_CLK_SHIFT_START_7_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_7_CLK_SHIFT_START_7_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_8_REG_OFFSET 0xc0
#define SERIAL_LINK_TX_PHY_CLK_START_8_CLK_SHIFT_START_8_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_8_CLK_SHIFT_START_8_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_8_CLK_SHIFT_START_8_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_8_CLK_SHIFT_START_8_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_8_CLK_SHIFT_START_8_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_9_REG_OFFSET 0xc4
#define SERIAL_LINK_TX_PHY_CLK_START_9_CLK_SHIFT_START_9_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_9_CLK_SHIFT_START_9_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_9_CLK_SHIFT_START_9_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_9_CLK_SHIFT_START_9_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_9_CLK_SHIFT_START_9_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_10_REG_OFFSET 0xc8
#define SERIAL_LINK_TX_PHY_CLK_START_10_CLK_SHIFT_START_10_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_10_CLK_SHIFT_START_10_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_10_CLK_SHIFT_START_10_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_10_CLK_SHIFT_START_10_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_10_CLK_SHIFT_START_10_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_11_REG_OFFSET 0xcc
#define SERIAL_LINK_TX_PHY_CLK_START_11_CLK_SHIFT_START_11_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_11_CLK_SHIFT_START_11_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_11_CLK_SHIFT_START_11_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_11_CLK_SHIFT_START_11_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_11_CLK_SHIFT_START_11_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_12_REG_OFFSET 0xd0
#define SERIAL_LINK_TX_PHY_CLK_START_12_CLK_SHIFT_START_12_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_12_CLK_SHIFT_START_12_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_12_CLK_SHIFT_START_12_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_12_CLK_SHIFT_START_12_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_12_CLK_SHIFT_START_12_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_13_REG_OFFSET 0xd4
#define SERIAL_LINK_TX_PHY_CLK_START_13_CLK_SHIFT_START_13_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_13_CLK_SHIFT_START_13_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_13_CLK_SHIFT_START_13_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_13_CLK_SHIFT_START_13_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_13_CLK_SHIFT_START_13_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_14_REG_OFFSET 0xd8
#define SERIAL_LINK_TX_PHY_CLK_START_14_CLK_SHIFT_START_14_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_14_CLK_SHIFT_START_14_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_14_CLK_SHIFT_START_14_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_14_CLK_SHIFT_START_14_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_14_CLK_SHIFT_START_14_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_15_REG_OFFSET 0xdc
#define SERIAL_LINK_TX_PHY_CLK_START_15_CLK_SHIFT_START_15_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_15_CLK_SHIFT_START_15_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_15_CLK_SHIFT_START_15_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_15_CLK_SHIFT_START_15_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_15_CLK_SHIFT_START_15_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_16_REG_OFFSET 0xe0
#define SERIAL_LINK_TX_PHY_CLK_START_16_CLK_SHIFT_START_16_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_16_CLK_SHIFT_START_16_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_16_CLK_SHIFT_START_16_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_16_CLK_SHIFT_START_16_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_16_CLK_SHIFT_START_16_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_17_REG_OFFSET 0xe4
#define SERIAL_LINK_TX_PHY_CLK_START_17_CLK_SHIFT_START_17_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_17_CLK_SHIFT_START_17_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_17_CLK_SHIFT_START_17_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_17_CLK_SHIFT_START_17_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_17_CLK_SHIFT_START_17_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_18_REG_OFFSET 0xe8
#define SERIAL_LINK_TX_PHY_CLK_START_18_CLK_SHIFT_START_18_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_18_CLK_SHIFT_START_18_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_18_CLK_SHIFT_START_18_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_18_CLK_SHIFT_START_18_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_18_CLK_SHIFT_START_18_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_19_REG_OFFSET 0xec
#define SERIAL_LINK_TX_PHY_CLK_START_19_CLK_SHIFT_START_19_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_19_CLK_SHIFT_START_19_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_19_CLK_SHIFT_START_19_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_19_CLK_SHIFT_START_19_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_19_CLK_SHIFT_START_19_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_20_REG_OFFSET 0xf0
#define SERIAL_LINK_TX_PHY_CLK_START_20_CLK_SHIFT_START_20_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_20_CLK_SHIFT_START_20_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_20_CLK_SHIFT_START_20_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_20_CLK_SHIFT_START_20_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_20_CLK_SHIFT_START_20_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_21_REG_OFFSET 0xf4
#define SERIAL_LINK_TX_PHY_CLK_START_21_CLK_SHIFT_START_21_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_21_CLK_SHIFT_START_21_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_21_CLK_SHIFT_START_21_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_21_CLK_SHIFT_START_21_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_21_CLK_SHIFT_START_21_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_22_REG_OFFSET 0xf8
#define SERIAL_LINK_TX_PHY_CLK_START_22_CLK_SHIFT_START_22_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_22_CLK_SHIFT_START_22_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_22_CLK_SHIFT_START_22_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_22_CLK_SHIFT_START_22_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_22_CLK_SHIFT_START_22_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_23_REG_OFFSET 0xfc
#define SERIAL_LINK_TX_PHY_CLK_START_23_CLK_SHIFT_START_23_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_23_CLK_SHIFT_START_23_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_23_CLK_SHIFT_START_23_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_23_CLK_SHIFT_START_23_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_23_CLK_SHIFT_START_23_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_24_REG_OFFSET 0x100
#define SERIAL_LINK_TX_PHY_CLK_START_24_CLK_SHIFT_START_24_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_24_CLK_SHIFT_START_24_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_24_CLK_SHIFT_START_24_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_24_CLK_SHIFT_START_24_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_24_CLK_SHIFT_START_24_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_25_REG_OFFSET 0x104
#define SERIAL_LINK_TX_PHY_CLK_START_25_CLK_SHIFT_START_25_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_25_CLK_SHIFT_START_25_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_25_CLK_SHIFT_START_25_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_25_CLK_SHIFT_START_25_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_25_CLK_SHIFT_START_25_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_26_REG_OFFSET 0x108
#define SERIAL_LINK_TX_PHY_CLK_START_26_CLK_SHIFT_START_26_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_26_CLK_SHIFT_START_26_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_26_CLK_SHIFT_START_26_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_26_CLK_SHIFT_START_26_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_26_CLK_SHIFT_START_26_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_27_REG_OFFSET 0x10c
#define SERIAL_LINK_TX_PHY_CLK_START_27_CLK_SHIFT_START_27_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_27_CLK_SHIFT_START_27_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_27_CLK_SHIFT_START_27_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_27_CLK_SHIFT_START_27_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_27_CLK_SHIFT_START_27_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_28_REG_OFFSET 0x110
#define SERIAL_LINK_TX_PHY_CLK_START_28_CLK_SHIFT_START_28_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_28_CLK_SHIFT_START_28_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_28_CLK_SHIFT_START_28_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_28_CLK_SHIFT_START_28_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_28_CLK_SHIFT_START_28_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_29_REG_OFFSET 0x114
#define SERIAL_LINK_TX_PHY_CLK_START_29_CLK_SHIFT_START_29_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_29_CLK_SHIFT_START_29_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_29_CLK_SHIFT_START_29_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_29_CLK_SHIFT_START_29_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_29_CLK_SHIFT_START_29_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_30_REG_OFFSET 0x118
#define SERIAL_LINK_TX_PHY_CLK_START_30_CLK_SHIFT_START_30_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_30_CLK_SHIFT_START_30_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_30_CLK_SHIFT_START_30_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_30_CLK_SHIFT_START_30_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_30_CLK_SHIFT_START_30_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_31_REG_OFFSET 0x11c
#define SERIAL_LINK_TX_PHY_CLK_START_31_CLK_SHIFT_START_31_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_31_CLK_SHIFT_START_31_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_31_CLK_SHIFT_START_31_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_31_CLK_SHIFT_START_31_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_31_CLK_SHIFT_START_31_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_32_REG_OFFSET 0x120
#define SERIAL_LINK_TX_PHY_CLK_START_32_CLK_SHIFT_START_32_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_32_CLK_SHIFT_START_32_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_32_CLK_SHIFT_START_32_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_32_CLK_SHIFT_START_32_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_32_CLK_SHIFT_START_32_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_33_REG_OFFSET 0x124
#define SERIAL_LINK_TX_PHY_CLK_START_33_CLK_SHIFT_START_33_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_33_CLK_SHIFT_START_33_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_33_CLK_SHIFT_START_33_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_33_CLK_SHIFT_START_33_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_33_CLK_SHIFT_START_33_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_34_REG_OFFSET 0x128
#define SERIAL_LINK_TX_PHY_CLK_START_34_CLK_SHIFT_START_34_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_34_CLK_SHIFT_START_34_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_34_CLK_SHIFT_START_34_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_34_CLK_SHIFT_START_34_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_34_CLK_SHIFT_START_34_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_35_REG_OFFSET 0x12c
#define SERIAL_LINK_TX_PHY_CLK_START_35_CLK_SHIFT_START_35_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_35_CLK_SHIFT_START_35_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_35_CLK_SHIFT_START_35_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_35_CLK_SHIFT_START_35_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_35_CLK_SHIFT_START_35_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_36_REG_OFFSET 0x130
#define SERIAL_LINK_TX_PHY_CLK_START_36_CLK_SHIFT_START_36_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_36_CLK_SHIFT_START_36_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_36_CLK_SHIFT_START_36_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_36_CLK_SHIFT_START_36_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_36_CLK_SHIFT_START_36_OFFSET })

// Controls duty cycle and phase of rising edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_START_37_REG_OFFSET 0x134
#define SERIAL_LINK_TX_PHY_CLK_START_37_CLK_SHIFT_START_37_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_START_37_CLK_SHIFT_START_37_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_START_37_CLK_SHIFT_START_37_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_START_37_CLK_SHIFT_START_37_MASK, .index = SERIAL_LINK_TX_PHY_CLK_START_37_CLK_SHIFT_START_37_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys (common
// parameters)
#define SERIAL_LINK_TX_PHY_CLK_END_CLK_SHIFT_END_FIELD_WIDTH 11
#define SERIAL_LINK_TX_PHY_CLK_END_CLK_SHIFT_END_FIELDS_PER_REG 2
#define SERIAL_LINK_TX_PHY_CLK_END_MULTIREG_COUNT 38

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_0_REG_OFFSET 0x138
#define SERIAL_LINK_TX_PHY_CLK_END_0_CLK_SHIFT_END_0_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_0_CLK_SHIFT_END_0_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_0_CLK_SHIFT_END_0_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_0_CLK_SHIFT_END_0_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_0_CLK_SHIFT_END_0_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_1_REG_OFFSET 0x13c
#define SERIAL_LINK_TX_PHY_CLK_END_1_CLK_SHIFT_END_1_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_1_CLK_SHIFT_END_1_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_1_CLK_SHIFT_END_1_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_1_CLK_SHIFT_END_1_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_1_CLK_SHIFT_END_1_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_2_REG_OFFSET 0x140
#define SERIAL_LINK_TX_PHY_CLK_END_2_CLK_SHIFT_END_2_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_2_CLK_SHIFT_END_2_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_2_CLK_SHIFT_END_2_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_2_CLK_SHIFT_END_2_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_2_CLK_SHIFT_END_2_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_3_REG_OFFSET 0x144
#define SERIAL_LINK_TX_PHY_CLK_END_3_CLK_SHIFT_END_3_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_3_CLK_SHIFT_END_3_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_3_CLK_SHIFT_END_3_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_3_CLK_SHIFT_END_3_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_3_CLK_SHIFT_END_3_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_4_REG_OFFSET 0x148
#define SERIAL_LINK_TX_PHY_CLK_END_4_CLK_SHIFT_END_4_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_4_CLK_SHIFT_END_4_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_4_CLK_SHIFT_END_4_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_4_CLK_SHIFT_END_4_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_4_CLK_SHIFT_END_4_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_5_REG_OFFSET 0x14c
#define SERIAL_LINK_TX_PHY_CLK_END_5_CLK_SHIFT_END_5_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_5_CLK_SHIFT_END_5_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_5_CLK_SHIFT_END_5_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_5_CLK_SHIFT_END_5_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_5_CLK_SHIFT_END_5_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_6_REG_OFFSET 0x150
#define SERIAL_LINK_TX_PHY_CLK_END_6_CLK_SHIFT_END_6_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_6_CLK_SHIFT_END_6_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_6_CLK_SHIFT_END_6_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_6_CLK_SHIFT_END_6_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_6_CLK_SHIFT_END_6_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_7_REG_OFFSET 0x154
#define SERIAL_LINK_TX_PHY_CLK_END_7_CLK_SHIFT_END_7_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_7_CLK_SHIFT_END_7_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_7_CLK_SHIFT_END_7_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_7_CLK_SHIFT_END_7_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_7_CLK_SHIFT_END_7_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_8_REG_OFFSET 0x158
#define SERIAL_LINK_TX_PHY_CLK_END_8_CLK_SHIFT_END_8_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_8_CLK_SHIFT_END_8_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_8_CLK_SHIFT_END_8_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_8_CLK_SHIFT_END_8_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_8_CLK_SHIFT_END_8_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_9_REG_OFFSET 0x15c
#define SERIAL_LINK_TX_PHY_CLK_END_9_CLK_SHIFT_END_9_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_9_CLK_SHIFT_END_9_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_9_CLK_SHIFT_END_9_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_9_CLK_SHIFT_END_9_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_9_CLK_SHIFT_END_9_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_10_REG_OFFSET 0x160
#define SERIAL_LINK_TX_PHY_CLK_END_10_CLK_SHIFT_END_10_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_10_CLK_SHIFT_END_10_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_10_CLK_SHIFT_END_10_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_10_CLK_SHIFT_END_10_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_10_CLK_SHIFT_END_10_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_11_REG_OFFSET 0x164
#define SERIAL_LINK_TX_PHY_CLK_END_11_CLK_SHIFT_END_11_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_11_CLK_SHIFT_END_11_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_11_CLK_SHIFT_END_11_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_11_CLK_SHIFT_END_11_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_11_CLK_SHIFT_END_11_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_12_REG_OFFSET 0x168
#define SERIAL_LINK_TX_PHY_CLK_END_12_CLK_SHIFT_END_12_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_12_CLK_SHIFT_END_12_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_12_CLK_SHIFT_END_12_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_12_CLK_SHIFT_END_12_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_12_CLK_SHIFT_END_12_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_13_REG_OFFSET 0x16c
#define SERIAL_LINK_TX_PHY_CLK_END_13_CLK_SHIFT_END_13_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_13_CLK_SHIFT_END_13_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_13_CLK_SHIFT_END_13_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_13_CLK_SHIFT_END_13_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_13_CLK_SHIFT_END_13_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_14_REG_OFFSET 0x170
#define SERIAL_LINK_TX_PHY_CLK_END_14_CLK_SHIFT_END_14_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_14_CLK_SHIFT_END_14_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_14_CLK_SHIFT_END_14_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_14_CLK_SHIFT_END_14_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_14_CLK_SHIFT_END_14_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_15_REG_OFFSET 0x174
#define SERIAL_LINK_TX_PHY_CLK_END_15_CLK_SHIFT_END_15_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_15_CLK_SHIFT_END_15_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_15_CLK_SHIFT_END_15_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_15_CLK_SHIFT_END_15_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_15_CLK_SHIFT_END_15_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_16_REG_OFFSET 0x178
#define SERIAL_LINK_TX_PHY_CLK_END_16_CLK_SHIFT_END_16_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_16_CLK_SHIFT_END_16_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_16_CLK_SHIFT_END_16_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_16_CLK_SHIFT_END_16_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_16_CLK_SHIFT_END_16_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_17_REG_OFFSET 0x17c
#define SERIAL_LINK_TX_PHY_CLK_END_17_CLK_SHIFT_END_17_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_17_CLK_SHIFT_END_17_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_17_CLK_SHIFT_END_17_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_17_CLK_SHIFT_END_17_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_17_CLK_SHIFT_END_17_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_18_REG_OFFSET 0x180
#define SERIAL_LINK_TX_PHY_CLK_END_18_CLK_SHIFT_END_18_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_18_CLK_SHIFT_END_18_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_18_CLK_SHIFT_END_18_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_18_CLK_SHIFT_END_18_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_18_CLK_SHIFT_END_18_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_19_REG_OFFSET 0x184
#define SERIAL_LINK_TX_PHY_CLK_END_19_CLK_SHIFT_END_19_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_19_CLK_SHIFT_END_19_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_19_CLK_SHIFT_END_19_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_19_CLK_SHIFT_END_19_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_19_CLK_SHIFT_END_19_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_20_REG_OFFSET 0x188
#define SERIAL_LINK_TX_PHY_CLK_END_20_CLK_SHIFT_END_20_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_20_CLK_SHIFT_END_20_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_20_CLK_SHIFT_END_20_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_20_CLK_SHIFT_END_20_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_20_CLK_SHIFT_END_20_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_21_REG_OFFSET 0x18c
#define SERIAL_LINK_TX_PHY_CLK_END_21_CLK_SHIFT_END_21_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_21_CLK_SHIFT_END_21_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_21_CLK_SHIFT_END_21_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_21_CLK_SHIFT_END_21_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_21_CLK_SHIFT_END_21_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_22_REG_OFFSET 0x190
#define SERIAL_LINK_TX_PHY_CLK_END_22_CLK_SHIFT_END_22_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_22_CLK_SHIFT_END_22_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_22_CLK_SHIFT_END_22_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_22_CLK_SHIFT_END_22_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_22_CLK_SHIFT_END_22_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_23_REG_OFFSET 0x194
#define SERIAL_LINK_TX_PHY_CLK_END_23_CLK_SHIFT_END_23_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_23_CLK_SHIFT_END_23_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_23_CLK_SHIFT_END_23_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_23_CLK_SHIFT_END_23_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_23_CLK_SHIFT_END_23_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_24_REG_OFFSET 0x198
#define SERIAL_LINK_TX_PHY_CLK_END_24_CLK_SHIFT_END_24_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_24_CLK_SHIFT_END_24_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_24_CLK_SHIFT_END_24_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_24_CLK_SHIFT_END_24_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_24_CLK_SHIFT_END_24_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_25_REG_OFFSET 0x19c
#define SERIAL_LINK_TX_PHY_CLK_END_25_CLK_SHIFT_END_25_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_25_CLK_SHIFT_END_25_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_25_CLK_SHIFT_END_25_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_25_CLK_SHIFT_END_25_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_25_CLK_SHIFT_END_25_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_26_REG_OFFSET 0x1a0
#define SERIAL_LINK_TX_PHY_CLK_END_26_CLK_SHIFT_END_26_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_26_CLK_SHIFT_END_26_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_26_CLK_SHIFT_END_26_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_26_CLK_SHIFT_END_26_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_26_CLK_SHIFT_END_26_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_27_REG_OFFSET 0x1a4
#define SERIAL_LINK_TX_PHY_CLK_END_27_CLK_SHIFT_END_27_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_27_CLK_SHIFT_END_27_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_27_CLK_SHIFT_END_27_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_27_CLK_SHIFT_END_27_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_27_CLK_SHIFT_END_27_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_28_REG_OFFSET 0x1a8
#define SERIAL_LINK_TX_PHY_CLK_END_28_CLK_SHIFT_END_28_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_28_CLK_SHIFT_END_28_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_28_CLK_SHIFT_END_28_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_28_CLK_SHIFT_END_28_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_28_CLK_SHIFT_END_28_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_29_REG_OFFSET 0x1ac
#define SERIAL_LINK_TX_PHY_CLK_END_29_CLK_SHIFT_END_29_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_29_CLK_SHIFT_END_29_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_29_CLK_SHIFT_END_29_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_29_CLK_SHIFT_END_29_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_29_CLK_SHIFT_END_29_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_30_REG_OFFSET 0x1b0
#define SERIAL_LINK_TX_PHY_CLK_END_30_CLK_SHIFT_END_30_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_30_CLK_SHIFT_END_30_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_30_CLK_SHIFT_END_30_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_30_CLK_SHIFT_END_30_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_30_CLK_SHIFT_END_30_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_31_REG_OFFSET 0x1b4
#define SERIAL_LINK_TX_PHY_CLK_END_31_CLK_SHIFT_END_31_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_31_CLK_SHIFT_END_31_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_31_CLK_SHIFT_END_31_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_31_CLK_SHIFT_END_31_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_31_CLK_SHIFT_END_31_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_32_REG_OFFSET 0x1b8
#define SERIAL_LINK_TX_PHY_CLK_END_32_CLK_SHIFT_END_32_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_32_CLK_SHIFT_END_32_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_32_CLK_SHIFT_END_32_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_32_CLK_SHIFT_END_32_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_32_CLK_SHIFT_END_32_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_33_REG_OFFSET 0x1bc
#define SERIAL_LINK_TX_PHY_CLK_END_33_CLK_SHIFT_END_33_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_33_CLK_SHIFT_END_33_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_33_CLK_SHIFT_END_33_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_33_CLK_SHIFT_END_33_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_33_CLK_SHIFT_END_33_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_34_REG_OFFSET 0x1c0
#define SERIAL_LINK_TX_PHY_CLK_END_34_CLK_SHIFT_END_34_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_34_CLK_SHIFT_END_34_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_34_CLK_SHIFT_END_34_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_34_CLK_SHIFT_END_34_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_34_CLK_SHIFT_END_34_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_35_REG_OFFSET 0x1c4
#define SERIAL_LINK_TX_PHY_CLK_END_35_CLK_SHIFT_END_35_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_35_CLK_SHIFT_END_35_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_35_CLK_SHIFT_END_35_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_35_CLK_SHIFT_END_35_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_35_CLK_SHIFT_END_35_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_36_REG_OFFSET 0x1c8
#define SERIAL_LINK_TX_PHY_CLK_END_36_CLK_SHIFT_END_36_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_36_CLK_SHIFT_END_36_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_36_CLK_SHIFT_END_36_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_36_CLK_SHIFT_END_36_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_36_CLK_SHIFT_END_36_OFFSET })

// Controls duty cycle and phase of falling edge in TX Phys
#define SERIAL_LINK_TX_PHY_CLK_END_37_REG_OFFSET 0x1cc
#define SERIAL_LINK_TX_PHY_CLK_END_37_CLK_SHIFT_END_37_MASK 0x7ff
#define SERIAL_LINK_TX_PHY_CLK_END_37_CLK_SHIFT_END_37_OFFSET 0
#define SERIAL_LINK_TX_PHY_CLK_END_37_CLK_SHIFT_END_37_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_TX_PHY_CLK_END_37_CLK_SHIFT_END_37_MASK, .index = SERIAL_LINK_TX_PHY_CLK_END_37_CLK_SHIFT_END_37_OFFSET })

// Enables Raw mode
#define SERIAL_LINK_RAW_MODE_EN_REG_OFFSET 0x1d0
#define SERIAL_LINK_RAW_MODE_EN_RAW_MODE_EN_BIT 0

// Receive channel select in RAW mode
#define SERIAL_LINK_RAW_MODE_IN_CH_SEL_REG_OFFSET 0x1d4
#define SERIAL_LINK_RAW_MODE_IN_CH_SEL_RAW_MODE_IN_CH_SEL_MASK 0x3f
#define SERIAL_LINK_RAW_MODE_IN_CH_SEL_RAW_MODE_IN_CH_SEL_OFFSET 0
#define SERIAL_LINK_RAW_MODE_IN_CH_SEL_RAW_MODE_IN_CH_SEL_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_RAW_MODE_IN_CH_SEL_RAW_MODE_IN_CH_SEL_MASK, .index = SERIAL_LINK_RAW_MODE_IN_CH_SEL_RAW_MODE_IN_CH_SEL_OFFSET })

// Mask for valid data in RX FIFOs during RAW mode. (common parameters)
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_RAW_MODE_IN_DATA_VALID_FIELD_WIDTH 1
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_RAW_MODE_IN_DATA_VALID_FIELDS_PER_REG \
  32
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_MULTIREG_COUNT 2

// Mask for valid data in RX FIFOs during RAW mode.
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_REG_OFFSET 0x1d8
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_0_BIT 0
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_1_BIT 1
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_2_BIT 2
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_3_BIT 3
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_4_BIT 4
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_5_BIT 5
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_6_BIT 6
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_7_BIT 7
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_8_BIT 8
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_9_BIT 9
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_10_BIT 10
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_11_BIT 11
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_12_BIT 12
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_13_BIT 13
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_14_BIT 14
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_15_BIT 15
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_16_BIT 16
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_17_BIT 17
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_18_BIT 18
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_19_BIT 19
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_20_BIT 20
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_21_BIT 21
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_22_BIT 22
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_23_BIT 23
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_24_BIT 24
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_25_BIT 25
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_26_BIT 26
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_27_BIT 27
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_28_BIT 28
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_29_BIT 29
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_30_BIT 30
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RAW_MODE_IN_DATA_VALID_31_BIT 31

// Mask for valid data in RX FIFOs during RAW mode.
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1_REG_OFFSET 0x1dc
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1_RAW_MODE_IN_DATA_VALID_32_BIT 0
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1_RAW_MODE_IN_DATA_VALID_33_BIT 1
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1_RAW_MODE_IN_DATA_VALID_34_BIT 2
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1_RAW_MODE_IN_DATA_VALID_35_BIT 3
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1_RAW_MODE_IN_DATA_VALID_36_BIT 4
#define SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1_RAW_MODE_IN_DATA_VALID_37_BIT 5

// Data received by the selected channel in RAW mode
#define SERIAL_LINK_RAW_MODE_IN_DATA_REG_OFFSET 0x1e0
#define SERIAL_LINK_RAW_MODE_IN_DATA_RAW_MODE_IN_DATA_MASK 0xffff
#define SERIAL_LINK_RAW_MODE_IN_DATA_RAW_MODE_IN_DATA_OFFSET 0
#define SERIAL_LINK_RAW_MODE_IN_DATA_RAW_MODE_IN_DATA_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_RAW_MODE_IN_DATA_RAW_MODE_IN_DATA_MASK, .index = SERIAL_LINK_RAW_MODE_IN_DATA_RAW_MODE_IN_DATA_OFFSET })

// Selects channels to send out data in RAW mode, '1 corresponds to
// broadcasting (common parameters)
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_RAW_MODE_OUT_CH_MASK_FIELD_WIDTH 1
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_RAW_MODE_OUT_CH_MASK_FIELDS_PER_REG 32
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_MULTIREG_COUNT 2

// Selects channels to send out data in RAW mode, '1 corresponds to
// broadcasting
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_REG_OFFSET 0x1e4
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_0_BIT 0
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_1_BIT 1
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_2_BIT 2
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_3_BIT 3
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_4_BIT 4
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_5_BIT 5
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_6_BIT 6
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_7_BIT 7
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_8_BIT 8
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_9_BIT 9
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_10_BIT 10
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_11_BIT 11
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_12_BIT 12
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_13_BIT 13
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_14_BIT 14
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_15_BIT 15
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_16_BIT 16
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_17_BIT 17
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_18_BIT 18
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_19_BIT 19
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_20_BIT 20
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_21_BIT 21
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_22_BIT 22
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_23_BIT 23
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_24_BIT 24
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_25_BIT 25
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_26_BIT 26
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_27_BIT 27
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_28_BIT 28
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_29_BIT 29
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_30_BIT 30
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_RAW_MODE_OUT_CH_MASK_31_BIT 31

// Selects channels to send out data in RAW mode, '1 corresponds to
// broadcasting
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1_REG_OFFSET 0x1e8
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1_RAW_MODE_OUT_CH_MASK_32_BIT 0
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1_RAW_MODE_OUT_CH_MASK_33_BIT 1
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1_RAW_MODE_OUT_CH_MASK_34_BIT 2
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1_RAW_MODE_OUT_CH_MASK_35_BIT 3
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1_RAW_MODE_OUT_CH_MASK_36_BIT 4
#define SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1_RAW_MODE_OUT_CH_MASK_37_BIT 5

// Data that will be pushed to the RAW mode output FIFO
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_REG_OFFSET 0x1ec
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_RAW_MODE_OUT_DATA_FIFO_MASK 0xffff
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_RAW_MODE_OUT_DATA_FIFO_OFFSET 0
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_RAW_MODE_OUT_DATA_FIFO_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_RAW_MODE_OUT_DATA_FIFO_MASK, .index = SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_RAW_MODE_OUT_DATA_FIFO_OFFSET })

// Status and control register for the RAW mode data out FIFO
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_REG_OFFSET 0x1f0
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_CLEAR_BIT 0
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_FILL_STATE_MASK 0x7
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_FILL_STATE_OFFSET 8
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_FILL_STATE_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_FILL_STATE_MASK, .index = SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_FILL_STATE_OFFSET })
#define SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_IS_FULL_BIT 31

// Enable transmission of data currently hold in the output FIFO
#define SERIAL_LINK_RAW_MODE_OUT_EN_REG_OFFSET 0x1f4
#define SERIAL_LINK_RAW_MODE_OUT_EN_RAW_MODE_OUT_EN_BIT 0

// Clears the flow control Fifo
#define SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR_REG_OFFSET 0x1f8
#define SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR_FLOW_CONTROL_FIFO_CLEAR_BIT 0

// Configuration settings for the TX side in the channel allocator
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_REG_OFFSET 0x1fc
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_BYPASS_EN_BIT 0
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_AUTO_FLUSH_EN_BIT 1
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_AUTO_FLUSH_COUNT_MASK 0xff
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_AUTO_FLUSH_COUNT_OFFSET 8
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_AUTO_FLUSH_COUNT_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_AUTO_FLUSH_COUNT_MASK, .index = SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_AUTO_FLUSH_COUNT_OFFSET })

// Channel enable mask for the TX side. (common parameters)
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_CHANNEL_ALLOC_TX_CH_EN_FIELD_WIDTH 1
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_CHANNEL_ALLOC_TX_CH_EN_FIELDS_PER_REG \
  32
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_MULTIREG_COUNT 2

// Channel enable mask for the TX side.
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_REG_OFFSET 0x200
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_0_BIT 0
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_1_BIT 1
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_2_BIT 2
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_3_BIT 3
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_4_BIT 4
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_5_BIT 5
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_6_BIT 6
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_7_BIT 7
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_8_BIT 8
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_9_BIT 9
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_10_BIT 10
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_11_BIT 11
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_12_BIT 12
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_13_BIT 13
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_14_BIT 14
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_15_BIT 15
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_16_BIT 16
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_17_BIT 17
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_18_BIT 18
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_19_BIT 19
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_20_BIT 20
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_21_BIT 21
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_22_BIT 22
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_23_BIT 23
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_24_BIT 24
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_25_BIT 25
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_26_BIT 26
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_27_BIT 27
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_28_BIT 28
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_29_BIT 29
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_30_BIT 30
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_CHANNEL_ALLOC_TX_CH_EN_31_BIT 31

// Channel enable mask for the TX side.
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1_REG_OFFSET 0x204
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1_CHANNEL_ALLOC_TX_CH_EN_32_BIT 0
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1_CHANNEL_ALLOC_TX_CH_EN_33_BIT 1
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1_CHANNEL_ALLOC_TX_CH_EN_34_BIT 2
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1_CHANNEL_ALLOC_TX_CH_EN_35_BIT 3
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1_CHANNEL_ALLOC_TX_CH_EN_36_BIT 4
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1_CHANNEL_ALLOC_TX_CH_EN_37_BIT 5

// Soft clear or force flush the TX side of the channel allocator
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL_REG_OFFSET 0x208
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL_CLEAR_BIT 0
#define SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL_FLUSH_BIT 1

// Configuration settings for the RX side in the channel allocator
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_REG_OFFSET 0x20c
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_BYPASS_EN_BIT 0
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_AUTO_FLUSH_EN_BIT 1
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_AUTO_FLUSH_COUNT_MASK 0xff
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_AUTO_FLUSH_COUNT_OFFSET 8
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_AUTO_FLUSH_COUNT_FIELD \
  ((bitfield_field32_t) { .mask = SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_AUTO_FLUSH_COUNT_MASK, .index = SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_AUTO_FLUSH_COUNT_OFFSET })
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_SYNC_EN_BIT 16

// Soft clear the RX side of the channel allocator
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL_REG_OFFSET 0x210
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL_CLEAR_BIT 0

// Channel enable mask for the RX side. (common parameters)
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_CHANNEL_ALLOC_RX_CH_EN_FIELD_WIDTH 1
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_CHANNEL_ALLOC_RX_CH_EN_FIELDS_PER_REG \
  32
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_MULTIREG_COUNT 2

// Channel enable mask for the RX side.
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_REG_OFFSET 0x214
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_0_BIT 0
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_1_BIT 1
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_2_BIT 2
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_3_BIT 3
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_4_BIT 4
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_5_BIT 5
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_6_BIT 6
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_7_BIT 7
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_8_BIT 8
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_9_BIT 9
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_10_BIT 10
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_11_BIT 11
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_12_BIT 12
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_13_BIT 13
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_14_BIT 14
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_15_BIT 15
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_16_BIT 16
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_17_BIT 17
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_18_BIT 18
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_19_BIT 19
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_20_BIT 20
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_21_BIT 21
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_22_BIT 22
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_23_BIT 23
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_24_BIT 24
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_25_BIT 25
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_26_BIT 26
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_27_BIT 27
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_28_BIT 28
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_29_BIT 29
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_30_BIT 30
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_CHANNEL_ALLOC_RX_CH_EN_31_BIT 31

// Channel enable mask for the RX side.
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1_REG_OFFSET 0x218
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1_CHANNEL_ALLOC_RX_CH_EN_32_BIT 0
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1_CHANNEL_ALLOC_RX_CH_EN_33_BIT 1
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1_CHANNEL_ALLOC_RX_CH_EN_34_BIT 2
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1_CHANNEL_ALLOC_RX_CH_EN_35_BIT 3
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1_CHANNEL_ALLOC_RX_CH_EN_36_BIT 4
#define SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1_CHANNEL_ALLOC_RX_CH_EN_37_BIT 5

#ifdef __cplusplus
}  // extern "C"
#endif
#endif  // _SERIAL_LINK_REG_DEFS_
// End generated register defines for serial_link